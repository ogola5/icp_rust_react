type ClaimStatus = variant { Approved; Rejected; Submitted; Verified };
type Dispute = record {
  id : nat64;
  status : DisputeStatus;
  farmer_id : nat64;
  resolution : opt text;
  consumer_id : nat64;
  reason : text;
};
type DisputePayload = record {
  farmer_id : nat64;
  consumer_id : nat64;
  reason : text;
};
type DisputeStatus = variant { UnderReview; Resolved; Raised };
type Error = variant { NotFound : record { msg : text } };
type GovernanceProposal = record {
  id : nat64;
  voting_records : vec VotingRecord;
  proposal_details : text;
  proposer_id : nat64;
};
type InsuranceClaim = record {
  id : nat64;
  status : ClaimStatus;
  claim_details : text;
  farmer_id : nat64;
  contract_id : nat64;
  evidence : text;
  affected_crops : vec text;
};
type InsuranceContract = record {
  id : nat64;
  terms : text;
  farmer_id : nat64;
  payout_criteria : text;
  consumer_id : nat64;
  conditions : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : Dispute; Err : text };
type Result_2 = variant { Ok : GovernanceProposal; Err : Error };
type Result_3 = variant { Ok : InsuranceContract; Err : Error };
type Result_4 = variant { Ok : StakeAdjustment; Err : Error };
type Result_5 = variant { Ok : TransactionRecord; Err : Error };
type Result_6 = variant { Ok : UserProfile; Err : Error };
type StakeAdjustment = record {
  new_stake : float64;
  old_stake : float64;
  user_id : nat64;
  reason : text;
};
type TransactionRecord = record {
  id : nat64;
  involved_parties : vec nat64;
  date : nat64;
  amount : float64;
};
type UserProfile = record {
  id : nat64;
  name : text;
  role : UserRole;
  stake_in_dao : float64;
  transaction_history : vec TransactionRecord;
};
type UserRole = variant { Farmer; Consumer };
type VoteType = variant { Approve; Reject; Abstain };
type VotingRecord = record {
  vote : VoteType;
  user_id : nat64;
  stake : float64;
};
service : {
  adjust_stake_claim_history : (nat64, vec InsuranceClaim) -> (Result);
  adjust_stake_dao_participation : (nat64, nat64) -> (Result);
  adjust_stake_transaction : (nat64, bool, float64) -> (Result);
  approve_or_reject_claim : (nat64, bool, text) -> (Result);
  create_dispute : (DisputePayload) -> (Result_1);
  create_governance_proposal : (text, nat64, vec VotingRecord) -> (
      opt GovernanceProposal,
    );
  create_insurance_contract : (nat64, nat64, text, text, text) -> (
      opt InsuranceContract,
    );
  create_stake_adjustment : (nat64, float64, float64, text) -> (
      opt StakeAdjustment,
    );
  create_transaction_record : (float64, nat64, vec nat64) -> (
      opt TransactionRecord,
    );
  create_user_profile : (text, UserRole, float64) -> (opt UserProfile);
  delete_dispute : (nat64) -> (Result);
  delete_governance_proposal : (nat64) -> (Result_2);
  delete_insurance_contract : (nat64) -> (Result_3);
  delete_stake_adjustment : (nat64) -> (Result_4);
  delete_transaction_record : (nat64) -> (Result_5);
  delete_user_profile : (nat64) -> (Result_6);
  enact_proposal : (nat64) -> (Result);
  get_dispute : (nat64) -> (Result_1) query;
  read_governance_proposal : (nat64) -> (Result_2) query;
  read_insurance_contract : (nat64) -> (Result_3) query;
  read_stake_adjustment : (nat64) -> (Result_4) query;
  read_transaction_record : (nat64) -> (Result_5) query;
  read_user_profile : (nat64) -> (Result_6) query;
  reward_user_for_positive_behavior : (nat64, text) -> (Result);
  submit_governance_proposal : (nat64, text) -> (opt GovernanceProposal);
  submit_insurance_claim : (nat64, nat64, text, vec text, text) -> (
      opt InsuranceClaim,
    );
  update_dispute : (nat64, DisputeStatus, opt text) -> (Result_1);
  update_governance_proposal : (nat64, text, nat64, vec VotingRecord) -> (
      Result_2,
    );
  update_insurance_contract : (nat64, nat64, nat64, text, text, text) -> (
      Result_3,
    );
  update_stake_adjustment : (nat64, nat64, float64, float64, text) -> (
      Result_4,
    );
  update_transaction_record : (nat64, float64, nat64, vec nat64) -> (Result_5);
  update_user_profile : (nat64, text, float64) -> (Result_6);
  verify_insurance_claim : (nat64) -> (Result);
  vote_on_proposal : (nat64, nat64, VoteType) -> (Result);
}
